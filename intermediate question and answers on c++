Q1) Give an example of Run-time Polymorphism/Virtual Functions.

Answer:

class SHAPE{
                  public virtual Draw() = 0; //abstract class with a pure virtual method
 };
 class CIRCLE: public SHAPE{
                  public int r;
                  public Draw() { this->drawCircle(0,0,r); }
 };
class SQUARE: public SHAPE{
               public int a;
               public Draw() { this->drawSquare(0,0,a,a); }
 };
 
 int main()
 {
                SHAPE shape1*;
                SHAPE shape2*;
  
                CIRCLE c1;
                SQUARE s1;
  
               shape1 = &c1;
              shape2 = &s1;
             cout<<shape1->Draw(0,0,2);
             cout<<shape2->Draw(0,0,10,10);
 }
 
 
 
 Q2) What is a Standard Template Library (STL)? What are the various types of STL Containers?

Answer: A Standard Template Library (STL) is a library of container templates approved by 
        the ANSI committee for inclusion in the standard C++ specification. We have various types of STL containers depending on how they store the elements.

A)  Queue, Stack – These are the same as traditional queue and stack and are called adaptive containers.
B)  Set, Map – These are basically containers that have key/value pairs and are associative in nature.
C)  Vector, deque – These are sequential in nature and have similarities to arrays.

Q3) What is an Iterator class?

Answer: In C++ a container class is a collection of different objects.

If we need to traverse through this collection of objects, we cannot do it using simple index variables. 
Hence, we have a special class in STL called an Iterator class which can be used to step through the contents of the container class.






















